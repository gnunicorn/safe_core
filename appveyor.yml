environment:
  global:
    RUST_BACKTRACE: 1
    RUST_VERSION: 1.14.0
    FEATURES: "use-mock-routing testing"
    RELEASE_SUFFIX: '-dev'

  # TODO These are all the build jobs. Adjust as necessary. Comment out what you
  # don't need
  matrix:
    # MinGW
    - TARGET: i686-pc-windows-gnu
      TARGET_NAME: win32-x32

    - TARGET: x86_64-pc-windows-gnu
      TARGET_NAME: win32-x64

    # MSVC
    # - TARGET: i686-pc-windows-msvc
    #   TARGET_NAME: win-i686-msvc
    # - TARGET: x86_64-pc-windows-msvc
    #   TARGET_NAME: win-x86_64-msvc

    # Testing other channels
    # - TARGET: x86_64-pc-windows-gnu
    #   RUST_VERSION: nightly
    # - TARGET: x86_64-pc-windows-msvc
    #   RUST_VERSION: nightly
branches:
  only:
    - master
    - dev
    - /^v\d+\.\d+\.\d+.*$/

clone_depth: 1

configuration:
  - Release

install:
  # - ps: |
  #       $url = "https://github.com/maidsafe/QA/raw/master/Powershell%20Scripts/AppVeyor"
  #       cmd /c curl -fsSL -o "Install Rustup.ps1" "$url/Install%20Rustup.ps1"
  #       . ".\Install Rustup.ps1"

# install:  
  # - ps: |
  #       $url = "https://github.com/maidsafe/QA/raw/master/Powershell%20Scripts/AppVeyor"
  #       cmd /c curl -fsSL -o "Install Rustup.ps1" "$url/Install%20Rustup.ps1"
  #       . ".\Install Rustup.ps1"
  - ps: >-
      If ($Env:TARGET -eq 'x86_64-pc-windows-gnu') {
        $Env:PATH += ';C:\msys64\mingw64\bin'
      } ElseIf ($Env:TARGET -eq 'i686-pc-windows-gnu') {
        $Env:PATH += ';C:\msys64\mingw32\bin'
      }
  - curl -sSf -o rustup-init.exe https://win.rustup.rs/
  - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_VERSION%
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - rustc -Vv
  - cargo -V

# platform:
#   - x86
#   - x64

build_script:
  - |-
    cd ffi_utils && cargo build --verbose --release
    cd ..\safe_core && cargo rustc --target %TARGET% --verbose --release --features testing -- --test -Zno-trans
    cd ..\safe_app && cargo rustc --target %TARGET% --verbose --release --features testing -- --test -Zno-trans
    cd ..\safe_authenticator && cargo rustc --target %TARGET% --verbose --features testing --release -- --test -Zno-trans

test_script:
  - |-
    cd ffi_utils && cargo test --target %TARGET% --verbose --release
    cd ..\safe_core && cargo test --target %TARGET% --verbose --release --features "%FEATURES%"
    cd ..\safe_app && cargo test --target %TARGET% --verbose --release --features "%FEATURES%"
    cd ..\safe_authenticator && cargo test --target %TARGET% --verbose --release --features "%FEATURES%"


# # TODO This is the "test phase", tweak it as you see fit
# test_script:
#   # we don't run the "test phase" when doing deploys
#   - if [%APPVEYOR_REPO_TAG%]==[false] (
#       cargo build --target %TARGET% &&
#       cargo build --target %TARGET% --release &&
#       cargo test --target %TARGET% &&
#       cargo test --target %TARGET% --release
#     )

before_deploy:
  # TODO This should happen for every set of features
  - ps: .ci\before_deploy.ps1 safe_app
  - ps: .ci\before_deploy.ps1 safe_authenticator


deploy:
  artifact: /.*\.zip/
  # TODO update `auth_token.secure`
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it. Go to https://ci.appveyor.com/tools/encrypt
  # - Paste the output down here
  auth_token:
    secure: zTlMH28wxFIAfZl/IdQ9xX9ElLj3TA02vbUD+bkDYPWBdCBLdFN4rsydE8CcsI9z
  description: ''
  on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    # RUST_VERSION: stable
    appveyor_repo_tag: true
  provider: GitHub

cache:
  - C:\Users\appveyor\.cargo\registry
  - target

build: false

