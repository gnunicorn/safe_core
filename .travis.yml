env:
  global:
    - Features="use-mock-routing testing"
    - RUST_BACKTRACE=1
    - PATH="$PATH:$HOME/.cargo/bin"
os:
  - linux
  - osx

services: docker
sudo: required

language: rust
rust:
  - stable
  - nightly-2016-11-17
sudo: false
branches:
  only:
    - master
    - dev
    - /^v\d+\.\d+\.\d+.*$/
cache:
  cargo: true

before_install:
  - set -e
  - if [ ! -z $TRAVIS_TAG ]; then
      curl https://sh.rustup.rs -sSf | \
        sh -s -- -y
    fi

before_script:
  - which cargo
  - which rustc
  - which rustup
  # - (which cargo-install-update && cargo install-update cargo-update) || cargo install cargo-update
  # - (which cargo-prune && cargo install-update cargo-prune) || cargo install cargo-prune
  # - if [ ! -z $TRAVIS_TAG ]; then
  #     echo "skipping test suite for deploy";
  #   elif [ "${TRAVIS_RUST_VERSION}" = stable ]; then
  #     (which rustfmt && cargo install-update rustfmt) || cargo install rustfmt;
  #   elif [ "${TRAVIS_OS_NAME}" = linux ]; then
  #     clippy_vers=0.0.99;
  #     if ! cargo clippy --version | grep -q $clippy_vers; then
  #       cargo install clippy --vers=$clippy_vers --force;
  #     fi
    # fi
script:
  - if [ ! -z $TRAVIS_TAG ]; then
      echo "skipping test suite for deploy";
    elif [ "${TRAVIS_RUST_VERSION}" = stable ]; then
        (
            set -x;
            echo "--- Check format ---" &&
            cd ffi_utils &&
            cargo fmt -- --write-mode=diff &&
            cd ../safe_core &&
            cargo fmt -- --write-mode=diff &&
            cd ../safe_app &&
            cargo fmt -- --write-mode=diff &&
            cd ../safe_authenticator &&
            cargo fmt -- --write-mode=diff &&
            echo "--- Test ffi_utils ---" &&
            cd ../ffi_utils &&
            cargo test  --verbose --release &&
            echo "--- Check compilation against actual routing ---" &&
            cd ../safe_core &&
            cargo rustc --verbose --release &&
            cargo rustc --verbose --features testing --release -- --test -Zno-trans &&
            cd ../safe_app &&
            cargo rustc --verbose --features testing --release -- --test -Zno-trans &&
            cd ../safe_authenticator &&
            cargo rustc --verbose --features testing --release -- --test -Zno-trans &&
            echo "--- Test against mock ---" &&
            cd ../safe_core &&
            cargo test --verbose --release --features "$Features" &&
            cd ../safe_app &&
            cargo test --verbose --release --features "$Features" &&
            cd ../safe_authenticator &&
            cargo test --verbose --release --features "$Features";
        );
    elif [ "${TRAVIS_OS_NAME}" = linux ]; then
        (
            set -x;
            cd ffi_utils && unset Features && cargo clippy && cargo clippy --profile=test && export Features="use-mock-routing testing" &&
            cd ../safe_core && cargo clippy && cargo clippy --profile=test --features="$Features" &&
            cd ../safe_app && cargo clippy && cargo clippy --profile=test --features="$Features" &&
            cd ../safe_authenticator && cargo clippy && cargo clippy --profile=test --features="$Features";
        )
    fi
before_cache:
  - cargo prune


before_deploy:
  - if [ ! -z $TRAVIS_TAG ]; then
      bash .ci/before_deploy.sh;
    fi

deploy:
  # TODO update `api_key.secure`
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it: `travis encrypt YOUR_TOKEN`
  # - Paste the output down here
  api_key:
    secure: "xulXTBCGT8jK7XuRhbfahD/Z42uKlaXmblj6DN1ERq9I6qRy7Z4D4WRbwDtEl5PY6pfOZ9TocE72GeaG6QmSzdc8PMn+QIfri4Eb0EGAMCrEHo2ed7nTJqNcwGf2sENVEjXrvzxNJGaLK9H2L+7npZELg0Ei1zNdp4sQHOZWJ6C/kgbx6wz8zbBdtkm63JMNeRylyYxUwINahpdPeqmEMWWKiHlj5JOKNwQLLMQngzJHvSlrU0ZXvIWlHICNp6Ofk4cc5WykjNVbbXvaGm/nHjgfRIthracKkeTQHBi2ot14DgPrVkp/7+qfn64JApIyEhXkNJO3sJsUNccdgf3YPem3DrmkKhvEN5MBBjq5mVVU7xRs21c781wp9n0SMq/dIaqYRqtBbJniBL1qvUO1yOaK+rewTZCT97PAA10PvBo4F3jNgc8/OYUKIxXYo3n2r1BxovPir+CPYpm5vOjJ0nyYHY5vd939ZVuc1Fw+FQ7p7WsTQ6VKQV0CwMhbkBhLdZDcQvMiiEWTfQzY6LUYbXJN9/alueuZeR+syOSTw3Lb+MjuIslAxgWdRgGm26Am9RKmBgIjTZdLDQswJbrZ+QkudnQKfAk4E8PBhhb6k3vfPOvsuvhnyDa/+ahxiKfSml4J/G/PaBHCSYQCovcA6K7H3MEQLjMMhFHe3299N2o="
  file_glob: true
  file: "*.zip"
  on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true
  provider: releases
  skip_cleanup: true