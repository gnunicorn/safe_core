env:
  global:
    - Features="use-mock-routing testing"
    - RUST_BACKTRACE=1
    - TARGET=x86_64-unknown-linux-gnu
    - PATH="$PATH:$HOME/.cargo/bin"
    - CRATES_CONFIG='declare -a FMT_CHECK_CRATES=("ffi_utils" "safe_core" safe_app" "safe_authenticator"); declare -a TEST_CRATES=("safe_core" safe_app" "safe_authenticator"); declare -a DEPLOY_CRATES=("safe_app" "safe_authenticator"); declare -a DEPLOY_FEATURES=("use-mock-routing testing,dev")'

language: rust
rust:
  - 1.14.0
  # - stable 
services: docker
sudo: required
dist: trusty

addons:
  apt:
    packages:
      - desktop-file-utils
      - xdg-utils
      - gcc-multilib
      - musl
      - musl-dev
      - musl-tools

matrix:
  fast_finish: true
  include:
    # for clippy:
    - os: linux
      rust: nightly-2016-11-17

    # Linux
    - env: >
        TARGET_NAME=linux-x64
      os: linux

    - env: >
        TARGET=i686-unknown-linux-gnu
        TARGET_NAME=linux-x32
      os: linux

      # static linked
    - env: >
        TARGET=i686-unknown-linux-musl
      os: linux
    - env: >
        TARGET=x86_64-unknown-linux-musl
      os: linux

    # OSX
    - env: >
        TARGET=i686-apple-darwin
        TARGET_NAME=darwin-x32
        MACOSX_DEPLOYMENT_TARGET=10.7
      os: osx
    - env: >
        TARGET=x86_64-apple-darwin
        TARGET_NAME=darwin-x64
        MACOSX_DEPLOYMENT_TARGET=10.7
      os: osx

branches:
  only:
    - master
    - dev
    - /^v\d+\.\d+\.\d+.*$/

cache:
  cargo: true

before_install:
  - set -e
  - if [ ! -z $TRAVIS_TAG ]; then
      curl https://sh.rustup.rs -sSf | sh -s -- -y;
    fi

before_script:
  # setup our target environment
  - rustup target install $TARGET || true
  # - (which cargo-install-update && cargo install-update cargo-update) || cargo install cargo-update
  # - (which cargo-prune && cargo install-update cargo-prune) || cargo install cargo-prune
  # - if [ "${TRAVIS_RUST_VERSION}" = stable ]; then
  #     (which rustfmt && cargo install-update rustfmt) || cargo install rustfmt;
  #   elif [ "${TRAVIS_OS_NAME}" = linux ]; then
  #     clippy_vers=0.0.99;
  #     if ! cargo clippy --version | grep -q $clippy_vers; then
  #       cargo install clippy --vers=$clippy_vers --force;
  #     fi
  # fi


script:
  - if [ ! -z $TRAVIS_TAG ]; then
      echo "skipping test suite for deploy";
    elif [ "${TRAVIS_RUST_VERSION}" = "stable" ]; then
      bash .ci/script.sh;
    elif [ "${TRAVIS_OS_NAME}" = linux ]; then
      bash .ci/clippy.sh;
    fi

# before_cache:
#   - cargo prune

before_deploy:
  - if [ ! -z $TRAVIS_TAG ]; then
      bash .ci/before_deploy.sh;
    fi

deploy:
  # TODO update `api_key.secure`
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it: `travis encrypt YOUR_TOKEN`
  # - Paste the output down here
  api_key:
    secure: "xulXTBCGT8jK7XuRhbfahD/Z42uKlaXmblj6DN1ERq9I6qRy7Z4D4WRbwDtEl5PY6pfOZ9TocE72GeaG6QmSzdc8PMn+QIfri4Eb0EGAMCrEHo2ed7nTJqNcwGf2sENVEjXrvzxNJGaLK9H2L+7npZELg0Ei1zNdp4sQHOZWJ6C/kgbx6wz8zbBdtkm63JMNeRylyYxUwINahpdPeqmEMWWKiHlj5JOKNwQLLMQngzJHvSlrU0ZXvIWlHICNp6Ofk4cc5WykjNVbbXvaGm/nHjgfRIthracKkeTQHBi2ot14DgPrVkp/7+qfn64JApIyEhXkNJO3sJsUNccdgf3YPem3DrmkKhvEN5MBBjq5mVVU7xRs21c781wp9n0SMq/dIaqYRqtBbJniBL1qvUO1yOaK+rewTZCT97PAA10PvBo4F3jNgc8/OYUKIxXYo3n2r1BxovPir+CPYpm5vOjJ0nyYHY5vd939ZVuc1Fw+FQ7p7WsTQ6VKQV0CwMhbkBhLdZDcQvMiiEWTfQzY6LUYbXJN9/alueuZeR+syOSTw3Lb+MjuIslAxgWdRgGm26Am9RKmBgIjTZdLDQswJbrZ+QkudnQKfAk4E8PBhhb6k3vfPOvsuvhnyDa/+ahxiKfSml4J/G/PaBHCSYQCovcA6K7H3MEQLjMMhFHe3299N2o="
  file_glob: true
  file: "*.zip"
  on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    condition: $TRAVIS_RUST_VERSION = "1.14.0"
    tags: true
  provider: releases
  skip_cleanup: true