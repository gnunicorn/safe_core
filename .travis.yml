env:
  global:
    - Features="use-mock-routing testing"
    - RUST_BACKTRACE=1
    - PATH=$PATH:$HOME/.cargo/bin
os:
  - linux
  - osx

services: docker
sudo: required

language: rust
rust:
  - stable
  - nightly-2016-11-17
sudo: false
branches:
  only:
    - master
    - dev
    - /^v\d+\.\d+\.\d+.*$/
cache:
  cargo: true

before_install: set -e

install:
  - if [ ! -z $TRAVIS_TAG ]; then
      bash .ci/install.sh;
    fi
  - source ~/.cargo/env || true

before_script:
  - (which cargo-install-update && cargo install-update cargo-update) || cargo install cargo-update
  - (which cargo-prune && cargo install-update cargo-prune) || cargo install cargo-prune
  - if [ ! -z $TRAVIS_TAG ]; then
      echo "skipping test suite for deploy";
    elif [ "${TRAVIS_RUST_VERSION}" = stable ]; then
      (which rustfmt && cargo install-update rustfmt) || cargo install rustfmt;
    elif [ "${TRAVIS_OS_NAME}" = linux ]; then
      clippy_vers=0.0.99;
      if ! cargo clippy --version | grep -q $clippy_vers; then
        cargo install clippy --vers=$clippy_vers --force;
      fi
    fi
script:
  - if [ ! -z $TRAVIS_TAG ]; then
      echo "skipping test suite for deploy";
    elif [ "${TRAVIS_RUST_VERSION}" = stable ]; then
        (
            set -x;
            echo "--- Check format ---" &&
            cd ffi_utils &&
            cargo fmt -- --write-mode=diff &&
            cd ../safe_core &&
            cargo fmt -- --write-mode=diff &&
            cd ../safe_app &&
            cargo fmt -- --write-mode=diff &&
            cd ../safe_authenticator &&
            cargo fmt -- --write-mode=diff &&
            echo "--- Test ffi_utils ---" &&
            cd ../ffi_utils &&
            cargo test  --verbose --release &&
            echo "--- Check compilation against actual routing ---" &&
            cd ../safe_core &&
            cargo rustc --verbose --release &&
            cargo rustc --verbose --features testing --release -- --test -Zno-trans &&
            cd ../safe_app &&
            cargo rustc --verbose --features testing --release -- --test -Zno-trans &&
            cd ../safe_authenticator &&
            cargo rustc --verbose --features testing --release -- --test -Zno-trans &&
            echo "--- Test against mock ---" &&
            cd ../safe_core &&
            cargo test --verbose --release --features "$Features" &&
            cd ../safe_app &&
            cargo test --verbose --release --features "$Features" &&
            cd ../safe_authenticator &&
            cargo test --verbose --release --features "$Features";
        );
    elif [ "${TRAVIS_OS_NAME}" = linux ]; then
        (
            set -x;
            cd ffi_utils && unset Features && cargo clippy && cargo clippy --profile=test && export Features="use-mock-routing testing" &&
            cd ../safe_core && cargo clippy && cargo clippy --profile=test --features="$Features" &&
            cd ../safe_app && cargo clippy && cargo clippy --profile=test --features="$Features" &&
            cd ../safe_authenticator && cargo clippy && cargo clippy --profile=test --features="$Features";
        )
    fi
before_cache:
  - cargo prune


before_deploy:
  - if [ ! -z $TRAVIS_TAG ] && [ "${TRAVIS_OS_NAME}" = linux ]; then
      bash .ci/before_deploy.sh;
    fi

deploy:
  # TODO update `api_key.secure`
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it: `travis encrypt YOUR_TOKEN`
  # - Paste the output down here
  api_key:
    secure: "VbdxST1+rBprNucUj6FgK9Tf1V8j6681djhUW2vvXGzr3RgRbgGRYFU1Izb9YCXCMOv/u4f7B/1ONap6Nin5ubcHiuEyODzrIFEE8VVvUBIdCDRr8hdgR0RZZ2sIkOWlXaaK+pQuYAaI3RpWEXBCDw2LBHNaG+lr0399UPa4W6YTETwf/85ATR4UoBD9IIUdwBf/KDrnJdJK2dqADz6T2D7u9tvT+CFNp/AwJbrvLaivwxzRGN21CAEie5dyl4F7o1AshKPxbcwU5dqVBHW7kCX5/C7dLu+56FrsFIVEd6DdA2hACaLpEKkxah6IXEVmMqFwv4FujmYBDYqrjb81D14QtjA/kl8nM5+P5Zv+GLsByvxrd97hxO4tS7I5nyugFbKvlitKBkv9d9yX9N1Sbxprlj1CJ8Oft9twiKFKfVp0rDtVgUvNn7ErThIRRcvD40etjbu6HTklX9w5v5LjjmgLW9LhpLBH27zmviESwY64IkHPrWUVC0Y+0wzQDNgOD1Pw7zVQYvRZ09W8TF/tQCgk7+4uyo6NLjPZI+iehBzkzpzy9yZx8XtqJquZtWgo+dxf0NRWnElXIiUBfitj6RzZKJtENl+KjunmSgTK4OkjI7xOkSMYFxNy3/HXnpisB2l9QpQW+BPYYg9ip9s0XGVyyZ4+HsLp8XzXu+s2Zm4="
  file_glob: true
  file: $CRATE_NAME-$TRAVIS_TAG-*
  on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true
  provider: releases
  skip_cleanup: true